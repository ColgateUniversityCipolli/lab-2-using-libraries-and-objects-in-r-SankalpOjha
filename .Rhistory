(file.paths <- list.dirs(path = "Music", full.names = TRUE, recursive = TRUE))
#Sifting to find which elements in the vector which have two /
(album <- file.paths[which((str_count(file.paths, "/")) == 2)])
songnames.wav <- c()
full.file.location <- c()
code.to.process <- c()
song.name.nowav <- c()
i=1
track.files <- list.files(album[i])
check.wav = str_count(track.files, pattern=".wav")
songnames.wav = track.files[which(check.wav == 1)]
track.files
check.wav
songnames.wav
y=1
songnames = songnames.wav[y]
songnames
y=2
songnames = songnames.wav[y]
songnames
library("stringr")
#Finding the path for the files
(file.paths <- list.dirs(path = "Music", full.names = TRUE, recursive = TRUE))
#Sifting to find which elements in the vector which have two /
(album <- file.paths[which((str_count(file.paths, "/")) == 2)])
songnames.wav <- c()
full.file.location <- c()
code.to.process <- c()
song.name.nowav <- c()
i=1
track.files <- list.files(album[i])
check.wav = str_count(track.files, pattern=".wav")
songnames.wav = track.files[which(check.wav == 1)]
y=1
song.curr = songnames.wav[y] #load the current song to work on
song.curr
curr.info <- paste(album[i], "/", song.curr, sep = "")
curr.info
curr.info <- paste('"', album[i], "/", song.curr, '"', sep = "")
curr.info
curr.info <- paste(album[i], "/", song.curr, sep = "")
curr.info
song.name.nowav <- str_sub(songnames[i],
start = 1,
end = (length(song.curr[i])-6))
song.name.nowav
artist.name <- str_split_i(song.name.nowav, "-", 2)
album.name <- str_split_i(song.name.nowav, "-", 3)
track.name <- str_split_i(album[i], "/", 3)
artist.name
album.name
track.name
###############################################################################
#LAB 2 (Tasks 1 & 2)
###############################################################################
library("stringr")
#Finding the path for the files
(file.paths <- list.dirs(path = "Music", full.names = TRUE, recursive = TRUE))
#Sifting to find which elements in the vector which have two /
(album <- file.paths[which((str_count(file.paths, "/")) == 2)])
songnames.wav <- c()
full.file.location <- c()
code.to.process <- c()
song.name.nowav <- c()
#for(i in 1:length(album)){
i=1
track.files <- list.files(album[i])
check.wav = str_count(track.files, pattern=".wav")
songnames.wav = track.files[which(check.wav == 1)]
#for(y in 1:length(songnames.wav)){
y=1
#load the current song to work on
song.curr = songnames.wav[y]
#filename
curr.info <- paste(album[i], "/", song.curr, sep = "")
#get song name without .WAV
song.name.nowav <- str_sub(songnames[i],
start = 1,
end = (length(song.curr[i])-6))
#gather components for output file
artist.name <- str_split_i(song.name.nowav, "-", 2)
track.name <- str_split_i(album[i], "/", 3)
album.name <- str_split_i(song.name.nowav, "-", 3)
artist.name
track.name
album.name
album[i]
str_split_i(song.name.nowav, "-", 2)
song.name.nowav
song.name.nowav
str_split_i(song.name.nowav, "-", 2)
str_split_i(song.name.nowav, "-", 3)
###############################################################################
#LAB 2 (Tasks 1 & 2)
###############################################################################
library("stringr")
#Finding the path for the files
(file.paths <- list.dirs(path = "Music", full.names = TRUE, recursive = TRUE))
#Sifting to find which elements in the vector which have two /
(album <- file.paths[which((str_count(file.paths, "/")) == 2)])
songnames.wav <- c()
full.file.location <- c()
code.to.process <- c()
song.name.nowav <- c()
#for(i in 1:length(album)){
i=1
track.files <- list.files(album[i])
check.wav = str_count(track.files, pattern=".wav")
songnames.wav = track.files[which(check.wav == 1)]
#for(y in 1:length(songnames.wav)){
y=0
#load the current song to work on
song.curr = songnames.wav[y]
#filename
curr.info <- paste(album[i], "/", song.curr, sep = "")
#get song name without .WAV
song.name.nowav <- str_sub(songnames[i],
start = 1,
end = (length(song.curr[i])-6))
#gather components for output file
artist.name <- str_split_i(song.name.nowav, "-", 2)
track.name <- str_split_i(album[i], "/", 3)
album.name <- str_split_i(song.name.nowav, "-", 3)
artist.name
track.name
album.name
##TASK 1, STEP 1
# find command to find subdirectories of music
(all.dirs = list.dirs("Music", recursive=TRUE))
##TASK 1, STEP 2
# use str_count() to count all / in each directory
# can sort into artist (count = 1) or album (count = 2)
counts.fslash = str_count(all.dirs, pattern ="/")
#print(counts)
album.dirs <- all.dirs[which(counts.fslash == 2)]
#Step 3.3
code.to.process = c()
for (i in 1:length(album.dirs)){
curr.album = album.dirs[i]
#Step 3.1
curr.files = list.files(curr.album)
#Step 3.2
counts.wav = str_count(curr.files, pattern=".wav")
curr.songs = curr.files[which(counts.wav == 1)]
for (j in 1:length(curr.songs)){
curr.song = curr.songs[j]
#Step 3.3.a
wav.file = paste(curr.album, "/", curr.song, sep = "")
#Step 3.3.b
curr.song.new = str_sub(curr.song, start = 0, end = -5)
#Step 3.3.c
part1 = str_split_i(curr.song.new, "-", 2)
part2 = str_split_i(curr.song.new, "-", 3)
part3 = str_split_i(curr.album, "/", 3)
json = paste(part3, ".json", sep = "")
json.file = paste(part1, part2, json, sep = "-")
#Step 3.3.d
final = paste("streaming_extractor_music.exe", " ", '"', wav.file, '"', " ", '"', json.file, '"', sep = "")
code.to.process = c(code.to.process, final)
}
}
writeLines(code.to.process, "batfile.txt")
part1
part2
part3
album.name
###############################################################################
#LAB 2 (Tasks 1 & 2)
###############################################################################
library("stringr")
#Finding the path for the files
(file.paths <- list.dirs(path = "Music", full.names = TRUE, recursive = TRUE))
#Sifting to find which elements in the vector which have two /
(album <- file.paths[which((str_count(file.paths, "/")) == 2)])
songnames.wav <- c()
full.file.location <- c()
code.to.process <- c()
song.name.nowav <- c()
i=1
track.files <- list.files(album[i])
check.wav = str_count(track.files, pattern=".wav")
songnames.wav = track.files[which(check.wav == 1)]
track.files
check.wav
songnames.wav
y=0
song.curr = songnames.wav[y]
song.curr
y=1
song.curr = songnames.wav[y]
song.curr
curr.info <- paste(album[i], "/", song.curr, sep = "")
curr.info
song.name.nowav <- str_sub(songnames[i],
start = 1,
end = (length(song.curr[i])-6))
song.name.nowav
song.name.nowav <- str_sub(song.curr[i],
start = 1,
end = (length(song.curr[i])-6))
song.name.nowav
artist.name <- str_split_i(song.name.nowav, "-", 2)
track.name <- str_split_i(album[i], "/", 3)
album.name <- str_split_i(song.name.nowav, "-", 3)
artist.name
track.name
album.name
artist.name <- str_split_i(song.name.nowav, "-", 2)
track.name <- str_split_i(song.name.nowav, "-", 3)
album.name <- str_split_i(album[i], "/", 3)
artist.name
track.name
album.name
song.name.nowav
y=1
#load the current song to work on
song.curr = songnames.wav[y]
#filename
curr.info <- paste(album[i], "/", song.curr, sep = "")
#get song name without .WAV
song.name.nowav <- str_sub(song.curr,
start = 1,
end = (length(song.curr)-6))
#gather components for output file
artist.name <- str_split_i(song.name.nowav, "-", 2)
track.name <- str_split_i(song.name.nowav, "-", 3)
album.name <- str_split_i(album[i], "/", 3)
artist.name
track.name
album.name
json.output <- paste(artist.name, album.name, track.name, sep = "-")
json.output
json.output <- paste(artist.name, album.name, track.name, ".json", sep = "-")
json.output
track.name.json <- paste(track.name, ".json", sep = "")
json.output <- paste(artist.name, album.name, track.name.json, sep = "-")
json.output
code.to.process <- c(code.to.process,
paste("streaming_extractor_music.exe",
" ", '"', curr.info,
'"', " ", '"', json.output,
'"', sep = ""))
code.to.process
code.to.process
###############################################################################
#LAB 2 (Tasks 1 & 2)
###############################################################################
library("stringr")
#Finding the path for the files
(file.paths <- list.dirs(path = "Music", full.names = TRUE, recursive = TRUE))
#Sifting to find which elements in the vector which have two /
(album <- file.paths[which((str_count(file.paths, "/")) == 2)])
songnames.wav <- c()
full.file.location <- c()
code.to.process <- c()
song.name.nowav <- c()
for(i in 1:length(album)){
#i=1
track.files <- list.files(album[i])
check.wav = str_count(track.files, pattern=".wav")
songnames.wav = track.files[which(check.wav == 1)]
for(y in 1:length(songnames.wav)){
#y=1
#load the current song to work on
song.curr = songnames.wav[y]
#filename
curr.info <- paste(album[i], "/", song.curr, sep = "")
#get song name without .WAV
song.name.nowav <- str_sub(song.curr,
start = 1,
end = (length(song.curr)-6))
#gather components for output file
artist.name <- str_split_i(song.name.nowav, "-", 2)
track.name <- str_split_i(song.name.nowav, "-", 3)
album.name <- str_split_i(album[i], "/", 3)
#combine components into one output
track.name.json <- paste(track.name, ".json", sep = "")
json.output <- paste(artist.name, album.name, track.name.json, sep = "-")
#put into code.to.process
code.to.process <- c(code.to.process,
paste("streaming_extractor_music.exe",
" ", '"', curr.info,
'"', " ", '"', json.output,
'"', sep = ""))
}
}
writeLines(code.to.process, "batfile.txt")
###############################################################################
#LAB 2 (Tasks 1 & 2)
###############################################################################
library("stringr")
#TASK 1
#Finding the path for the files
(file.paths <- list.dirs(path = "Music", full.names = TRUE, recursive = TRUE))
#Sifting to find which elements in the vector which have two /
(album <- file.paths[which((str_count(file.paths, "/")) == 2)])
songnames.wav <- c()
full.file.location <- c()
code.to.process <- c()
song.name.nowav <- c()
for(i in 1:length(album)){
#i=1
track.files <- list.files(album[i])
check.wav = str_count(track.files, pattern=".wav")
songnames.wav = track.files[which(check.wav == 1)]
for(y in 1:length(songnames.wav)){
#y=1
#load the current song to work on
song.curr = songnames.wav[y]
#filename
curr.info <- paste(album[i], "/", song.curr, sep = "")
#get song name without .WAV
song.name.nowav <- str_sub(song.curr,
start = 1,
end = (length(song.curr)-6))
#gather components for output file
artist.name <- str_split_i(song.name.nowav, "-", 2)
track.name <- str_split_i(song.name.nowav, "-", 3)
album.name <- str_split_i(album[i], "/", 3)
#combine components into one output
track.name.json <- paste(track.name, ".json", sep = "")
json.output <- paste(artist.name, album.name, track.name.json, sep = "-")
#put into code.to.process
code.to.process <- c(code.to.process,
paste("streaming_extractor_music.exe",
" ", '"', curr.info,
'"', " ", '"', json.output,
'"', sep = ""))
}
}
writeLines(code.to.process, "batfile.txt")
install.packages("jsonlite")
library("jsonlite")
(all.files)
(list.files())
song.json <- list.files(pattern = ".json")
song.json
artist = str_split_i(song.json, "-", 2)
artist
artist = str_split_i(song.json, "-", 1)
artist
artist = str_split_i(song.json, "-", 1)
album = str_split_i(song.json, "-", 2)
track = str_sub(song.json, "-", 3)
song.json <- list.files(pattern = ".json")
artist = str_split_i(song.json, "-", 1)
album = str_split_i(song.json, "-", 2)
track = str_split_i(song.json, "-", 3)
artist
album
track
song.split = str_split_1(song, "-")
song.split = str_split_1(song.json, "-")
artist = song.split[1]
album = song.split[2]
track = str_sub(song.split[3], start = 0, end = -6)
artist
album
track
track = str_sub(find.track, start = which, end = -5)
find.track = str_split_1(song, "-")
song.json <- list.files(pattern = ".json")
artist = str_split_i(song.json, "-", 1)
album = str_split_i(song.json, "-", 2)
find.track = str_split_1(song.json, "-")
track = str_sub(find.track, start = which, end = -5)
song.json <- list.files(pattern = ".json")
artist = str_split_i(song.json, "-", 1)
album = str_split_i(song.json, "-", 2)
find.track = str_split_1(song.json, "-")
track = str_sub(find.track[3], start = 0, end = -5)
song.json
artist
album
find.track
track
track = str_sub(find.track[3], start = 0, end = -6)
track
load.song.json <- fromJSON(song.json)
load.song.json
view(load.song.json)
View(load.song.json)
View(load.song.json)
###############################################################################
#LAB 2 (Tasks 1 & 2)
###############################################################################
library("stringr")
#TASK 1
#Finding the path for the files
(file.paths <- list.dirs(path = "Music", full.names = TRUE, recursive = TRUE))
#Sifting to find which elements in the vector which have two /
(album <- file.paths[which((str_count(file.paths, "/")) == 2)])
songnames.wav <- c()
full.file.location <- c()
code.to.process <- c()
song.name.nowav <- c()
for(i in 1:length(album)){
#i=1
track.files <- list.files(album[i])
check.wav = str_count(track.files, pattern=".wav")
songnames.wav = track.files[which(check.wav == 1)]
for(y in 1:length(songnames.wav)){
#y=1
#load the current song to work on
song.curr = songnames.wav[y]
#filename
curr.info <- paste(album[i], "/", song.curr, sep = "")
#get song name without .WAV
song.name.nowav <- str_sub(song.curr,
start = 1,
end = (length(song.curr)-6))
#gather components for output file
artist.name <- str_split_i(song.name.nowav, "-", 2)
track.name <- str_split_i(song.name.nowav, "-", 3)
album.name <- str_split_i(album[i], "/", 3)
#combine components into one output
track.name.json <- paste(track.name, ".json", sep = "")
json.output <- paste(artist.name, album.name, track.name.json, sep = "-")
#put into code.to.process
code.to.process <- c(code.to.process,
paste("streaming_extractor_music.exe",
" ", '"', curr.info,
'"', " ", '"', json.output,
'"', sep = ""))
}
}
writeLines(code.to.process, "batfile.txt")
#TASK 2
#extracting artist, album, and track
song.json <- list.files(pattern = ".json")
artist = str_split_i(song.json, "-", 1)
album = str_split_i(song.json, "-", 2)
find.track = str_split_1(song.json, "-")
track = str_sub(find.track[3], start = 0, end = -6)
#load JSON file
load.song.json <- fromJSON(song.json)
#extract data
average.loudness <- load.song.json$lowlevel$average_loudness
mean.spectral.energy <- load.song.json$lowlevel$spectral_energy$mean
danceability <- load.song.json$rhythm$danceability
bpm <- load.song.json$rhythm$bpm
key.key <- load.song.json$tonal$key_key
key.scale <- load.song.json$tonal$key_scale
length <- load.song.json$metadata$audio_properties$length
average.loudness
mean.spectral.energy
danceability
bpm
key.key
key.scale
length
###############################################################################
#LAB 2 (Tasks 1 & 2)
###############################################################################
library("stringr")
#TASK 1
#Finding the path for the files
(file.paths <- list.dirs(path = "Music", full.names = TRUE, recursive = TRUE))
#Sifting to find which elements in the vector which have two /
(album <- file.paths[which((str_count(file.paths, "/")) == 2)])
songnames.wav <- c()
full.file.location <- c()
code.to.process <- c()
song.name.nowav <- c()
for(i in 1:length(album)){
#i=1
track.files <- list.files(album[i])
check.wav = str_count(track.files, pattern=".wav")
songnames.wav = track.files[which(check.wav == 1)]
for(y in 1:length(songnames.wav)){
#y=1
#load the current song to work on
song.curr = songnames.wav[y]
#filename
curr.info <- paste(album[i], "/", song.curr, sep = "")
#get song name without .WAV
song.name.nowav <- str_sub(song.curr,
start = 1,
end = (length(song.curr)-6))
#gather components for output file
artist.name <- str_split_i(song.name.nowav, "-", 2)
track.name <- str_split_i(song.name.nowav, "-", 3)
album.name <- str_split_i(album[i], "/", 3)
#combine components into one output
track.name.json <- paste(track.name, ".json", sep = "")
json.output <- paste(artist.name, album.name, track.name.json, sep = "-")
#put into code.to.process
code.to.process <- c(code.to.process,
paste("streaming_extractor_music.exe",
" ", '"', curr.info,
'"', " ", '"', json.output,
'"', sep = ""))
}
}
writeLines(code.to.process, "batfile.txt")
#TASK 2
#extracting artist, album, and track
song.json <- list.files(pattern = ".json")
artist = str_split_i(song.json, "-", 1)
album = str_split_i(song.json, "-", 2)
find.track = str_split_1(song.json, "-")
track = str_sub(find.track[3], start = 0, end = -6)
#load JSON file
load.song.json <- fromJSON(song.json)
#extract data
average.loudness <- load.song.json$lowlevel$average_loudness
mean.spectral.energy <- load.song.json$lowlevel$spectral_energy$mean
danceability <- load.song.json$rhythm$danceability
bpm <- load.song.json$rhythm$bpm
key.key <- load.song.json$tonal$key_key
key.scale <- load.song.json$tonal$key_scale
length <- load.song.json$metadata$audio_properties$length
